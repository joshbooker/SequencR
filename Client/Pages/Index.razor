@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using SequencR.Client.Infrastructure
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container-fluid">
    <div class="top-row px-4">
        <strong>SequencR</strong>
        <span style="padding-left: 10px;">@connectionState</span>
        <span style="padding-left: 10px;">@CurrentStep</span>
    </div>
    <div class="row">
        <div class="col">
            <div class="card text-center card-controls">
                <div class="card-header">
                    Controls
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        BPM @BPM
                    </li>
                    <li class="list-group-item">
                        <input type="text" class="dial"
                                @bind-value="@BPM"
                                @bind-value:event="oninput"
                                data-min="50"
                                data-max="250"
                                data-displayInput="true"
                                data-width="120"
                                data-thickness=".2">
                    </li>
                    <li class="list-group-item">
                        <div class="card card-controls">
                            <div class="card-header">
                                Instruments
                            </div>
                            <div class="card-body">
                                <select id="availableInstrumentMenu" 
                                        value="@selectedSample" 
                                        @onchange="SampleSelectionChanged">
                                    @foreach (var instrument in Sequence.AvailableSamples)
                                    {
                                    <option>@instrument</option>
                                    }
                                </select>
                            </div>
                            <div class="card-footer">
                                <button type="button" 
                                        class="btn btn-success" 
                                        @onclick="OnAddInstrumentClicked">Add Instrument</button>
                            </div>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <button type="button" class="btn btn-success" @onclick="Start">Start</button>
                    </li>
                    <li class="list-group-item">
                        <button type="button" class="btn btn-danger" @onclick="Stop">Stop</button>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col">
            <div class="card text-center card-instrument">
                <div class="card-header">
                    Instruments
                </div>
                <ul class="list-group list-group-flush">
                    @for (int index = 0; index < Sequence.SamplesInUse.Count; index++)
                    {
                        <li class="list-group-item trig-cell">
                            <button type="button" 
                                    onclick="playSound('@Sequence.SamplesInUse[index]')" 
                                    class="btn btn-secondary btn-instrument">@System.IO.Path.GetFileNameWithoutExtension(Sequence.SamplesInUse[index])</button>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="col-9">
            <div class="card-deck">
                @foreach (var step in Sequence.Steps)
                {
                <div class="card text-center card-step" data-step="@step.Index">
                    <div class="card-header">
                        @step.Index
                    </div>
                    <ul class="list-group list-group-flush">
                        @foreach (var sample in step.Trigs)
                        {
                        <li class="list-group-item trig-cell">
                            <label class="rocker rocker-small">
                                <input type="checkbox" 
                                       class="triggerToggle"
                                       checked="@sample.IsArmed" 
                                       data-sample="@sample.SampleFileName"
                                       data-step="@step.Index"
                                       @onchange="args => { 
                                           OnTriggerToggled(sample.SampleFileName, 
                                                step.Index, 
                                            (bool)args.Value); 
                                        } ">
                                <span class="switch-left">On</span>
                                <span class="switch-right">Off</span>
                            </label>
                        </li>
                        }
                    </ul>
                </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    //test w multi-clients
    string baseUrl = "http://192.168.1.118:4000/";
    //perhaps make hubEndpoint user configurable
    //string baseUrl = "http://localhost:4000/";
    HubConnection hubConnection;
    string connectionState = "Disconnected";
    string selectedSample;
    int BPM = 120;
    int CurrentStep = 0;
    DotNetObjectReference<BpmHelper> dotNetObject;
    Sequence Sequence { get; set; } = new Sequence();

    protected async Task Start()
    {
        await hubConnection.InvokeAsync("StartSequencerAsync");
    }

    protected async Task Stop()
    {
        await hubConnection.InvokeAsync("StopSequencerAsync");
    }

    protected void OnAddInstrumentClicked()
    {
        hubConnection.InvokeAsync("AddInstrumentToSequence", selectedSample);
        StateHasChanged();
    }

    protected void SampleSelectionChanged(ChangeEventArgs e)
    {
        selectedSample = (string)e.Value;
        StateHasChanged();
    }

    protected void OnTriggerToggled(string sample, int step, bool isArmed)
    {
        hubConnection.InvokeAsync("ToggleTrigger", sample, step, isArmed);
    }

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(
                string.Concat(baseUrl,"sequencerHub")
            ))
            .WithAutomaticReconnect(new TimeSpan[] {
                TimeSpan.FromSeconds(0),
                TimeSpan.FromSeconds(0),
                TimeSpan.FromSeconds(5),
                TimeSpan.FromSeconds(8),
                TimeSpan.FromSeconds(10),
                TimeSpan.FromSeconds(15),
                TimeSpan.FromSeconds(30)
                })
            .Build();

        hubConnection.On<int>("MovedToStep", async (step) =>
        {
            await JSRuntime.InvokeVoidAsync("moveToStep", step);
        });

        hubConnection.On<int>("BpmSet", (bpm) =>
        {
            BPM = bpm;
            StateHasChanged();
        });

        hubConnection.On<Sequence>("SequenceReceived", (sequence) =>
        {
            Sequence = sequence;
            selectedSample = sequence.AvailableSamples.First();
            StateHasChanged();
        });

        hubConnection.Reconnecting += (error) =>
        {
            connectionState = hubConnection.State.ToString();
            StateHasChanged();
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            connectionState = hubConnection.State.ToString();
            StateHasChanged();
            return Task.CompletedTask;
        };

        hubConnection.Closed += (error) =>
        {
            connectionState = hubConnection.State.ToString();
            StateHasChanged();
            return Task.CompletedTask;
        };

        await hubConnection.StartAsync().ContinueWith(async (o) =>
        {
            connectionState = hubConnection.State.ToString();
            if(hubConnection.State == HubConnectionState.Connected)
            {
                await JSRuntime.InvokeVoidAsync("init", BPM);
                await hubConnection.InvokeAsync("Init");
            }
            StateHasChanged();
        });

        dotNetObject =
            DotNetObjectReference.Create(new BpmHelper(hubConnection));

        await JSRuntime.InvokeAsync<string>(
            "bpmFunctions.wireUp",
            dotNetObject);
    }
    public void Dispose()
    {
        dotNetObject?.Dispose();
    }
}